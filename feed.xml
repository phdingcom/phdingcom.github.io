<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">PHDING</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://phding.com/feed.xml" />
<link rel="alternate" type="text/html" href="http://phding.com" />
<updated>2020-02-26T22:55:17-05:00</updated>
<id>http://phding.com/</id>
<author>
  <name>sd</name>
  <uri>http://phding.com/</uri>
  
</author>


  

<entry>
  <title type="html"><![CDATA[韦曼秋色]]></title>
  <link rel="alternate" type="text/html" href="http://phding.com/wyman/" />
  <id>http://phding.com/wyman</id>
  <published>2019-10-16T22:00:00-04:00</published>
  <updated>2019-10-16T22:00:00-04:00</updated>
  <author>
    <name>sd</name>
    <uri>http://phding.com</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;一整天淫雨霏霏，到了黄昏居然突然停了下来。随即太阳拨开厚重的云，向着地面投出刺眼的余晖。其时D参加完欢送会下楼拿东西，正顺便聊聊近况，室内骤然亮了起来，连落满灰尘的黑色线缆都被镀上了一层金色。D走后，实验室骤然冷清下来，我也无法坐定，穿上外套朝韦曼公园走去。&lt;/p&gt;

&lt;p&gt;初秋的巴城，本就是随着一次一次的雨水逐渐滑向冬季的。这场雨从昨夜不间断地下到今天下午，带来的寒意可想而知。雨后尚未静息的风掠过老橡树，不知何时已在地下攒起了第一堆落叶，随着风漫无目的地在校园里的红色地砖上游荡着。刚从下午最后一堂课出来的本科生拿着夹子，蹦跳着躲开地上一滩滩的积水，可偶尔还是和这成群游荡的落叶撞个满怀。&lt;/p&gt;

&lt;p&gt;绕过了吉尔曼堂后面的楼梯来到戴克尔花园，本科生可就几乎没有了。五年前作为新生入学的时候，好像还来这里吃过BBQ，那时便发现花园中心有小天使雕像的水池实在是可爱。只是后来每次路过这里，戴克尔花园大多都是一副人迹罕至的破败相——冬季则更甚，连水池都和花草一并干枯。现在并不是冬天，水池又刚藉由秋雨滋润，在落日的辉映下显得格外温顺。我在这里驻留片刻，便移步往圣马丁天桥走去。&lt;/p&gt;

&lt;p&gt;校园西门外的树木，大概已在此屹立了颇有一段时间，威严地俯视着蜿蜒的圣马丁路。那尚未完全转黄的树叶，虽然不再像夏天绿得仿佛要滴下汁水，却也足以在壮丽的落霞前再密密地布上一层厚厚的绿幕。风轻轻一拨，整幅绿幕便发出类似小钹轻轻摩擦的声音。杜甫诗云：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;无边落木萧萧下，&lt;br /&gt;
不尽长江滚滚来。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我中学读到这首诗并不懂得什么是『萧萧』。现在回想起来，大概就是这种声音吧。&lt;/p&gt;

&lt;p&gt;然而巴城并无长江那样的大河。向南行至圣马丁行人栈道桥，地势陡然降低，朝着韦曼公园的方向延伸出一片深涧，这便是贯穿巴城南北的琼斯溪了。溪流在行人桥下弯弯曲曲，形成了一个水洼。因为溪流水量本就不大，稍有宽广处，便几乎成了静水。我从桥上远远望着这小潭，突然想起颇不应景的咏春诗：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;垂钓绿湾春，春深杏花乱。&lt;br /&gt;
潭清疑水浅，荷动知鱼散。&lt;br /&gt;
日暮待情人，维舟绿杨岸。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我从深涧让出的绿幕空隙望去，灰蓝色的云低低地压在地平线不远的地方，被夕阳镀上的金边渐渐转为红色，几乎要在天边烧起来。我望着这团雨后的火和着云层的律动摇曳，一边又缓缓地随着夕阳西下而熄灭。几只飞鸟时不时慌乱地从树间闪过，似乎要赶在天黑前归巢。有只松鼠却丝毫不显得慌张，翘着毛茸茸的大尾巴神气地从栈道桥上跳过，似乎在试图从栈道的缝隙找出一两个卡住的橡子。&lt;/p&gt;

&lt;p&gt;我一人站在圣马丁栈道上，初秋的风使我感到周身畅快，几乎要追随深涧飞向远方。待我回过神，高耸的树木在墨蓝色的天空中已只剩了黑影，而那天边翻卷的云，也和那深涧中幽远的静水一样，在一片混沌中消失不见了。&lt;/p&gt;

&lt;p&gt;海克曼堂&lt;br /&gt;
2019年10月16日&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://phding.com/wyman/&quot;&gt;韦曼秋色&lt;/a&gt; was originally published by sd at &lt;a href=&quot;http://phding.com&quot;&gt;PHDING&lt;/a&gt; on October 16, 2019.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[(Updated 17/01/04) Setup YouCompleteMe For C++ Programming]]></title>
  <link rel="alternate" type="text/html" href="http://phding.com/setup-youcompleteme-for-c-plus-plus-programming/" />
  <id>http://phding.com/setup-youcompleteme-for-c-plus-plus-programming</id>
  <published>2017-01-03T23:33:32-05:00</published>
  <updated>2017-01-03T23:33:32-05:00</updated>
  <author>
    <name>sd</name>
    <uri>http://phding.com</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;This is a updated version of the original post after I fixed my YouCompleteMe (or YCM) installation broke-down on Jan 3rd, 2017. Better configuration solution for &lt;code&gt;bjam&lt;/code&gt; build system is appended at the end.&lt;/p&gt;

&lt;h3 id=&quot;preparation&quot;&gt;Preparation&lt;/h3&gt;

&lt;p&gt;To start with, visit the &lt;a href=&quot;https://github.com/Valloric/YouCompleteMe&quot;&gt;Github page&lt;/a&gt; and read through the section with the title “Mac OS X super-quick installation”. Particularly pay attention to the part that has something to do with C Family language, as I quote:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;If you want C-family completion, you MUST have the latest Xcode installed along with the latest Command Line Tools (they are installed when you start Xcode for the first time).&lt;/li&gt;
    &lt;li&gt;Install CMake. Preferably with &lt;a href=&quot;http://mxcl.github.com/homebrew/&quot;&gt;Homebrew&lt;/a&gt;, but here’s the &lt;a href=&quot;http://www.cmake.org/download/&quot;&gt;stand-alone CMake installer&lt;/a&gt;.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Apart from these, another thing to check for is your Vim version. First, YouCompleteMe will only work with Vim version higher than 7.3.584. To check for your version, just run &lt;code&gt;vi --version | head -1&lt;/code&gt; or start Vim without specifying a file to open. Also, your Vim should have python2.x support. To check whether you have python2.x support, run &lt;code&gt;vi --version | grep &#39;+python&#39;&lt;/code&gt;. If the output is not null, you’re good to go. The YouCompleteMe document requires you to use MacVim, but from my experience that does not matter much as long as the previous two requirements are met.&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

&lt;p&gt;Having finished all these checks, it’s time to start install YCM. Basically YCM has two parts: the Vim plugin that interacts with Vim, and the clang backend that generates completion by compiling the source file. Hence, the installation will also proceed in two parts.&lt;/p&gt;

&lt;h4 id=&quot;vim-plugin&quot;&gt;Vim Plugin&lt;/h4&gt;

&lt;p&gt;Install  with &lt;a href=&quot;https://github.com/VundleVim/Vundle.vim&quot;&gt;Vundle&lt;/a&gt;. If you don’t use vundle, it’s worth to take some time to get familiar with it.&lt;/p&gt;

&lt;h4 id=&quot;clang-backend&quot;&gt;Clang Backend&lt;/h4&gt;

&lt;p&gt;I just charged ahead and used the simple installation script, which is just typing the following command to compile YCM:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/.vim/bundle/YouCompleteMe
./install.sh --clang-completer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The maintainer confused me somewhat by saying:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Please refer to the full Installation Guide below; the following commands are provided on a best-effort basis and may not work for you.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;which seem to have meant that everyone should go through the procedure in the full Installation Guide, and yet he kept the quick installation guide for each OS. Persoanlly I tried both full and quick installation on my Mac OS X, and I don’t see any difference. But YMMV.&lt;/p&gt;

&lt;h3 id=&quot;configuration&quot;&gt;Configuration&lt;/h3&gt;

&lt;h4 id=&quot;ycmextraconfpy-file&quot;&gt;&lt;code&gt;.ycm_extra_conf.py&lt;/code&gt; file&lt;/h4&gt;

&lt;p&gt;OK. Now you have installed YCM, but this is not the end of the story. Because specially for YCM to work with C++ program, you’ll have to write a &lt;code&gt;.ycm_extra_conf.py&lt;/code&gt; file in your project directory, to provide your plugin with all the headers and flags needed to compile the source. Fortunately you don’t really have to write it, at least most of the time – you can have it generated automatically, using &lt;a href=&quot;https://github.com/rdnetto/YCM-Generator&quot;&gt;YCM-Generator&lt;/a&gt;. Don’t attempt to use Vundle to install it, just &lt;code&gt;git clone&lt;/code&gt; to somewhere and you are done.&lt;/p&gt;

&lt;p&gt;What this generator does is reading the makefile in your project directory and translate the setup of your build into the setup of your auto-completion plugin. But still, there is a template file which you need to fill up, which points to your C++ standard library and so on. Now here is the problem: how would your plugin know where is your C++ standard library? Well the fact is your plugin won’t automatically know, and your YCM-Generator won’t either – you have to tell them.&lt;/p&gt;

&lt;p&gt;So you’ll have to know where does the C++ library locate in your machine. Type &lt;code&gt;echo | clang -v -E -x c++ -&lt;/code&gt; into your terminal, you should be able to get something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Apple LLVM version 8.0.0 (clang-800.0.42.1)
Target: x86_64-apple-darwin16.3.0

...

#include &quot;...&quot; search starts here:
#include &amp;lt;...&amp;gt; search starts here:
 /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1
 /usr/local/include
 /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/clang/8.0.0/include
 /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include
 /usr/include
 /System/Library/Frameworks (framework directory)
 /Library/Frameworks (framework directory)
End of search list.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above directories listed are the places where your C++ compiler would search for when they build your C++ programs, so naturally, you should tell your auto-completion program to search the same place as well. To do this, go to your YCM-Generator directory and find &lt;code&gt;template.py&lt;/code&gt;. As the name suggests, this is the “template” your generator use to generate your auto-completion comfiguration file. Find the &lt;code&gt;flags&lt;/code&gt; variable (which is a python list) at the beginning of the source file, add your include directories like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;a name=&quot;True-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;a name=&quot;True-2&quot;&gt;&lt;/a&gt;	&lt;span class=&quot;s&quot;&gt;&amp;#39;-isystem&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;a name=&quot;True-3&quot;&gt;&lt;/a&gt;	&lt;span class=&quot;s&quot;&gt;&amp;#39;/path/to/your/first/system/include/directory&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;a name=&quot;True-4&quot;&gt;&lt;/a&gt;	&lt;span class=&quot;s&quot;&gt;&amp;#39;-isystem&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;a name=&quot;True-5&quot;&gt;&lt;/a&gt;	&lt;span class=&quot;s&quot;&gt;&amp;#39;/path/to/your/second/system/include/directory&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;a name=&quot;True-6&quot;&gt;&lt;/a&gt;	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;a name=&quot;True-7&quot;&gt;&lt;/a&gt;	&lt;span class=&quot;s&quot;&gt;&amp;#39;-I&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;a name=&quot;True-8&quot;&gt;&lt;/a&gt;	&lt;span class=&quot;s&quot;&gt;&amp;#39;/path/to/your/first/local/include/directory&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;a name=&quot;True-9&quot;&gt;&lt;/a&gt;	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;a name=&quot;True-10&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In short, the &lt;code&gt;-isystem&lt;/code&gt; tag precedes all the system library paths, while &lt;code&gt;-I&lt;/code&gt; precedes all the local include directories. Keep in mind that this is a template so you shouldn’t add any project-specific paths in there. Personally, I only add &lt;code&gt;.&lt;/code&gt; to the local include directories in &lt;code&gt;template.py&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When you generate configuration files for your project with YCM-Generator, you should run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;/path/to/YCM-Generator/config_gen.py /path/to/project
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s not too hard, isn’t it? Regretfully, when I write this post, YCMGenerator only supports four build systems: &lt;code&gt;make&lt;/code&gt; &lt;code&gt;cmake&lt;/code&gt; &lt;code&gt;qmake&lt;/code&gt; and &lt;code&gt;autotools&lt;/code&gt;. Now what should we do if we are using building systems other than these four? I used to use some guesswork to fill in the compilation flags, and as you can imagine things do not work as consistently as I hoped. And after two years I finally find a workaround.&lt;/p&gt;

&lt;h4 id=&quot;optional-use-bear-to-generate-flags&quot;&gt;(Optional) Use &lt;code&gt;Bear&lt;/code&gt; To Generate Flags&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: The &lt;code&gt;.ycm_extra_conf.py&lt;/code&gt; config file I provided only works for &lt;code&gt;bjam&lt;/code&gt; build system. If you need to make it work on other building systems, you may need to create your own config.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Credit&lt;/strong&gt;: I found this solution &lt;a href=&quot;https://github.com/gavinbeatty/gavinbeatty/blob/master/help/vim-ycm.mkd&quot;&gt;here&lt;/a&gt; by Gavin Beatty. I also forked his YCM config file and made some small changes. Thanks.&lt;/p&gt;

&lt;p&gt;From my understanding, &lt;a href=&quot;https://github.com/rizsotto/Bear&quot;&gt;Bear&lt;/a&gt; is a program that intercepts all the compilation commands incurred by a system build and formatting them into a &lt;code&gt;compile_commands.json&lt;/code&gt; file, “for clang tooling”. I don’t really know why one would want to do that, but all we want is generating clang compilation flags for YCM, and it seems to do its job.&lt;/p&gt;

&lt;p&gt;However, for OS X version later than 10.11 (El Capitan), &lt;code&gt;Bear&lt;/code&gt; may not be as easy to setup as it is for others because it doesn’t like something called &lt;a href=&quot;https://en.wikipedia.org/wiki/System_Integrity_Protection&quot;&gt;SIP&lt;/a&gt; in OS X. To make it work, you have to turn SIP off first. You can find a lot of tutorials that teach you how to do that. If you don’t want to turn SIP off, you may want to try &lt;a href=&quot;https://github.com/rizsotto/scan-build&quot;&gt;scan-build&lt;/a&gt;, which contains some workaround specifically designed for that. But I’m only going to introduce &lt;code&gt;Bear&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Setting up &lt;code&gt;Bear&lt;/code&gt; on OS X itself is pretty straight-forward – there is a brew format so you can install it simply by calling:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install bear
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What you’ll do next is generating the json file. Here is how you do it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bear [build command]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example, my command is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bear ./bjam --with-boost=~/Workspace/moses/opt --with-cmph=~/Workspace/moses/opt --with-mm --with-probing-pt -j4 -a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may see a warning about &lt;code&gt;.dylb&lt;/code&gt; and code signing. Just ignore it.&lt;/p&gt;

&lt;p&gt;The last step is to copy &lt;a href=&quot;https://github.com/shuoyangd/trilobites/blob/master/.ycm_extra_conf.py&quot;&gt;this&lt;/a&gt; YCM config file to your project root directory. It is designed to first go through &lt;code&gt;compile_commands.json&lt;/code&gt; and collect flags for the source file you opened. If no flags are found in the json file, the script falls back to scanning your project folders and some guesswork. To make it cleverer, you can (and you should!) make changes in &lt;code&gt;CustomFlags&lt;/code&gt; function to add some paths that you would like to include.&lt;/p&gt;

&lt;p&gt;One last note: &lt;code&gt;Bear&lt;/code&gt; does not assume build system, and it should also be pretty easy to change &lt;code&gt;.ycm_extra_conf.py&lt;/code&gt; to accommodate your build system. So this solution should work for all the C++ build systems. Of course, I still recommend using &lt;code&gt;YCM-Generator&lt;/code&gt; if possible such that you don’t have to tamper with your OS X security system.&lt;/p&gt;

&lt;h4 id=&quot;optional-vimrc-setup&quot;&gt;(Optional) &lt;code&gt;.vimrc&lt;/code&gt; Setup&lt;/h4&gt;

&lt;p&gt;YCM provides lots of hidden features in its configurations, which is simply too long for me to go through. So far I just picked some handy ones to add to my &lt;code&gt;.vimrc&lt;/code&gt; file. If you know any other settings that are not included here, please let me know.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;a name=&quot;True-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;c&quot;&gt;&amp;quot;&amp;quot; turn on completion in comments&lt;/span&gt;
&lt;a name=&quot;True-2&quot;&gt;&lt;/a&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:ycm_complete_in_comments&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;a name=&quot;True-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;c&quot;&gt;&amp;quot;&amp;quot; load ycm conf by default&lt;/span&gt;
&lt;a name=&quot;True-4&quot;&gt;&lt;/a&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:ycm_confirm_extra_conf&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;a name=&quot;True-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;c&quot;&gt;&amp;quot;&amp;quot; turn on tag completion&lt;/span&gt;
&lt;a name=&quot;True-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:ycm_collect_identifiers_from_tags_files&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;a name=&quot;True-7&quot;&gt;&lt;/a&gt;&lt;span class=&quot;c&quot;&gt;&amp;quot;&amp;quot; only show completion as a list instead of a sub-window&lt;/span&gt;
&lt;a name=&quot;True-8&quot;&gt;&lt;/a&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;completeopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-=&lt;/span&gt;preview
&lt;a name=&quot;True-9&quot;&gt;&lt;/a&gt;&lt;span class=&quot;c&quot;&gt;&amp;quot;&amp;quot; start completion from the first character&lt;/span&gt;
&lt;a name=&quot;True-10&quot;&gt;&lt;/a&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:ycm_min_num_of_chars_for_completion&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;a name=&quot;True-11&quot;&gt;&lt;/a&gt;&lt;span class=&quot;c&quot;&gt;&amp;quot;&amp;quot; don&amp;#39;t cache completion items&lt;/span&gt;
&lt;a name=&quot;True-12&quot;&gt;&lt;/a&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:ycm_cache_omnifunc&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;a name=&quot;True-13&quot;&gt;&lt;/a&gt;&lt;span class=&quot;c&quot;&gt;&amp;quot;&amp;quot; complete syntax keywords&lt;/span&gt;
&lt;a name=&quot;True-14&quot;&gt;&lt;/a&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:ycm_seed_identifiers_with_syntax&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This concludes our configuration for YCM. Open a C++ project and start Viming.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://phding.com/setup-youcompleteme-for-c-plus-plus-programming/&quot;&gt;(Updated 17/01/04) Setup YouCompleteMe For C++ Programming&lt;/a&gt; was originally published by sd at &lt;a href=&quot;http://phding.com&quot;&gt;PHDING&lt;/a&gt; on January 03, 2017.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Setup For C++ Programming Under OS X Command Line]]></title>
  <link rel="alternate" type="text/html" href="http://phding.com/setup-for-c-plus-plus-programming-under-os-x-command-line/" />
  <id>http://phding.com/setup-for-c-plus-plus-programming-under-os-x-command-line</id>
  <published>2015-09-06T21:23:37-04:00</published>
  <updated>2015-09-06T21:23:37-04:00</updated>
  <author>
    <name>sd</name>
    <uri>http://phding.com</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;Recently I’m converting from a clan called Java back to something else called C++, in which I believed so profoundly three years ago.&lt;/p&gt;

&lt;p&gt;The past three years witnessed more changes apart from the my religion for programming languages, but also my whole programming workflow as well.&lt;br /&gt;
I’m now a OS X user and a command line enthusiast, while three years ago I was still struggling between Windows &amp;amp; Ubuntu and was an IDE advocate (by the way I still find Visual Studio 2010 the best C++ IDE I’ve ever used).&lt;/p&gt;

&lt;p&gt;So there is gonna be some change. Let’s get going.&lt;/p&gt;

&lt;h3 id=&quot;environment&quot;&gt;Environment&lt;/h3&gt;
&lt;p&gt;The environment comes with the package &lt;em&gt;Xcode Command Line Tools&lt;/em&gt;. It has the compiler, library, debugger… everything &lt;em&gt;essential&lt;/em&gt; a system should provide to program C++. That being said, &lt;strong&gt;I personally recommend installing the full Xcode package&lt;/strong&gt;, since at times you’ll need more than that. Yes it takes around 7 gigabytes of disk, but to make your life easier, it worths that space.&lt;/p&gt;

&lt;p&gt;As you may expect, the toolkit is contained in the full Xcode package. But for Xcode 4.3 and later, it is no longer automatically installed, so don’t assume you have installed it if you saw Xcode on your machine.&lt;/p&gt;

&lt;p&gt;So how do you know you have already installed Xcode command line tools? As introduced in &lt;a href=&quot;http://railsapps.github.io/xcode-command-line-tools.html&quot;&gt;this&lt;/a&gt; very nice tutorial and my own experience, there are three options:&lt;/p&gt;

&lt;p&gt;Check if you have installed Xcode full package. Just type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xcode-select -p
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to your terminal. If you see the following line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/Applications/Xcode.app/Contents/Developer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It means you have installed the Xcode full package, and you are good to go. If you instead see this line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/Library/Developer/CommandLineTools
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It means you have installed the Xcode commnad line tool, you are also good to go.&lt;/p&gt;

&lt;p&gt;Or you can type &lt;code&gt;gcc&lt;/code&gt; to your terminal, you might see the prompt that say something like “gcc requires you to install command line developer tools” and ask if you want to install. Just say yes, and after the installation process you’ll have the developer tools package in your machine.&lt;/p&gt;

&lt;p&gt;You can also open the Xcode application and go to the preferences window. Proceed to the download section and if you see a install button next to the command line tools, it means you haven’t install the command line tools or at least your tool is not up to date. Press the button to install/update the tool and you are done.&lt;/p&gt;

&lt;h3 id=&quot;editor&quot;&gt;Editor&lt;/h3&gt;
&lt;p&gt;OK here is the embarrassing moment: I use Vim myself, and so for those Emacs users, I won’t teach you how to set up editor unless you convert to Vim :)&lt;/p&gt;

&lt;p&gt;For Vim users, I assume you have the basic plugins such as &lt;code&gt;NerdTree&lt;/code&gt;, &lt;code&gt;Vundle&lt;/code&gt; and &lt;code&gt;Syntastic&lt;/code&gt; (if you don’t know what I’m talking about I suggest you to look at &lt;a href=&quot;http://haridas.in/vim-as-your-ide.html&quot;&gt;this&lt;/a&gt; and do a little personalization with your vim first). What I would like to recommend here for C++ programming are these two plugins: &lt;a href=&quot;https://github.com/Valloric/YouCompleteMe&quot;&gt;YouCompleteMe&lt;/a&gt; and &lt;a href=&quot;http://ctags.sourceforge.net/&quot;&gt;ctags&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Under Mac OS X, you may want to use &lt;code&gt;MacVim&lt;/code&gt; instead of &lt;code&gt;Vim&lt;/code&gt;, since it often comes with most complete support customized for Mac OS X (such as python). You can use it like gVim in a graphical interface, or invoke &lt;code&gt;mvim -v&lt;/code&gt; to use it within the terminal. You can even mimic Vim by setting an alias &lt;code&gt;alias vim=&#39;mvim -v&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;youcompleteme-ycm&quot;&gt;YouCompleteMe (YCM)&lt;/h4&gt;
&lt;p&gt;Trust me – I’ve tried many, many different auto-completion plugins in Vim, since the time when I was still sticked to Java. The story is, most of the plugins &lt;em&gt;claim&lt;/em&gt; they can do something amazing, but they either just suck or take forever to get the configuration correct (at least for me). YouCompleteMe is the first and the only auto-completion plugin that I managed to set up correctly on my Vim and that makes me feel it gets its work done.&lt;/p&gt;

&lt;p&gt;The setup for YouCompleteMe is somewhat tricky, and at times its documentation is not perfect. To avoid diverging too far in this post, I set aside an individual post for the procedure. If you are interested, read it &lt;a href=&quot;http://phding.com/setup-youcompleteme-for-c-plus-plus-programming/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;ctags&quot;&gt;ctags&lt;/h4&gt;
&lt;p&gt;ctags is a must-have if you often deal with large projects. Strictly speaking it is not a Vim plugin, in fact you can use it with Emacs or gedit. But since Vim is the best editor in the world, you should use it with Vim ;)&lt;/p&gt;

&lt;p&gt;For the definition of ctags, let me quote the definition from the &lt;a href=&quot;http://ctags.sourceforge.net/&quot;&gt;official website&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ctags generates an index (or tag) file of language objects found in source files that allows these items to be quickly and easily located by a text editor or other utility. A tag signifies a language object for which an index entry is available (or, alternatively, the index entry created for that object).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These tags will be generated into a file called &lt;code&gt;tags&lt;/code&gt; (by default). When you search for the definition of a variable / the invocations of a function, Vim will read this &lt;code&gt;tags&lt;/code&gt; file and point you to the place(s) you should look at. That’s why it is especially useful for large projects – you’ll need to figure out what variables / functions actually do from time to time.&lt;/p&gt;

&lt;p&gt;To start using ctags, download the source package from the &lt;a href=&quot;http://ctags.sourceforge.net/&quot;&gt;official website&lt;/a&gt;. &lt;code&gt;cd&lt;/code&gt; to the directory of your source package and run the following script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./configure
make
make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are working on a server, you may want to substitute the first line with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./configure --prefix=/path/to/a/local/directory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;so that you don’t have to fiddle with the &lt;code&gt;sudo&lt;/code&gt; previlege.&lt;/p&gt;

&lt;p&gt;After installation, check your version with &lt;code&gt;ctags --version&lt;/code&gt;. If you see something start with &lt;code&gt;Exuberant Ctags&lt;/code&gt;, you are fine. If not, you probably have some older version ctags and you are still running that older version. So you may probably need to remove the older version before install again, or overwrite your &lt;code&gt;PATH&lt;/code&gt; variable to overwrite the path to your older version.&lt;/p&gt;

&lt;p&gt;To generate tags file, most often you’ll &lt;code&gt;cd&lt;/code&gt; to your codebase and run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ctags -R .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;-R&lt;/code&gt; option tells ctags that you want to search recursively into the sub-directories of your codebase.&lt;/p&gt;

&lt;p&gt;Now you have the tag file for your codebase, you can start to code in Vim. To search for a tag, move your cursor to a function / a class / a variable name and type &lt;code&gt;ctrl + ]&lt;/code&gt;, and you’ll be tranferred to the first tag in the list. If it is not desired, type &lt;code&gt;g + ctrl + ]&lt;/code&gt; instead to see the whole tag list. To return from the transferred postion, type &lt;code&gt;ctrl + t&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;compiler&quot;&gt;Compiler&lt;/h3&gt;
&lt;p&gt;If you set up the environment (Xcode Command Line Tools) correctly, you should have both &lt;code&gt;clang&lt;/code&gt; and &lt;code&gt;gcc&lt;/code&gt;. I personally slightly prefer &lt;code&gt;gcc&lt;/code&gt; for more complete language support, more optimization options and better compatibility for some projects. But I’ve also heard that &lt;code&gt;clang&lt;/code&gt; might generate more detailed error messages. It’s up to you which to choose.&lt;/p&gt;

&lt;p&gt;Note that if you use YouCompleteMe, you must have clang ready on your machine, since it has a clang-based engine.&lt;/p&gt;

&lt;h3 id=&quot;debugger&quot;&gt;Debugger&lt;/h3&gt;
&lt;p&gt;Save yourself the endless trouble and use &lt;code&gt;lldb&lt;/code&gt; instead of &lt;code&gt;gdb&lt;/code&gt;. &lt;code&gt;lldb&lt;/code&gt; defaults to the OS X environment and is very similar to &lt;code&gt;gdb&lt;/code&gt; except some differences in commands. In case you are wondering, &lt;a href=&quot;http://lldb.llvm.org/lldb-gdb.html&quot;&gt;here&lt;/a&gt; is a very useful chart to show these differences. You can also use this chart as a cheat sheet for common operations.&lt;/p&gt;

&lt;p&gt;To start debugging an executable, type &lt;code&gt;lldb /path/to/executable&lt;/code&gt; to your terminal to start the debugger. Setup the breakpoints and other stuff and type &lt;code&gt;run&lt;/code&gt; to actually start the program. You can add any argument you want to pass to the program after the &lt;code&gt;run&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Two more tips with the debugger in case you are new to command line workflow: remember to compile your program with -g option to enable variable inspection; the command to exit &lt;code&gt;lldb&lt;/code&gt; or &lt;code&gt;gdb&lt;/code&gt; is &lt;code&gt;quit&lt;/code&gt; ;)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I understand that this tutorial is error-prone and by no means complete. If you have any suggestions on how to make this tutorial more practical, leave a note in the comments and we can discuss!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://phding.com/setup-for-c-plus-plus-programming-under-os-x-command-line/&quot;&gt;Setup For C++ Programming Under OS X Command Line&lt;/a&gt; was originally published by sd at &lt;a href=&quot;http://phding.com&quot;&gt;PHDING&lt;/a&gt; on September 06, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[摘抄与随笔]]></title>
  <link rel="alternate" type="text/html" href="http://phding.com/digest-and-random-words/" />
  <id>http://phding.com/digest-and-random-words</id>
  <published>2015-05-22T23:33:42-04:00</published>
  <updated>2015-05-22T23:33:42-04:00</updated>
  <author>
    <name>sd</name>
    <uri>http://phding.com</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;一个偶然的机会，又把舒伯特的冬之旅重新听了一遍，被其中一首歌的歌词吸引住：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Manche Trän’ aus meinen Augen &lt;br /&gt;
Ist gefallen in den Schnee; &lt;br /&gt;
Seine kalten Flocken saugen &lt;br /&gt;
Durstig ein das heiße Weh.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Wenn die Gräser sprossen wollen &lt;br /&gt;
Weht daher ein lauer Wind, &lt;br /&gt;
Und das Eis zerspringt in Schollen &lt;br /&gt;
Und der weiche Schnee zerrinnt.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Schnee, du weißt von meinem Sehnen, &lt;br /&gt;
Sag’, wohin doch geht dein Lauf? &lt;br /&gt;
Folge nach nur meinen Tränen, &lt;br /&gt;
Nimmt dich bald das Bächlein auf.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Wirst mit ihm die Stadt durchziehen, &lt;br /&gt;
Muntre Straßen ein und aus; &lt;br /&gt;
Fühlst du meine Tränen glühen, &lt;br /&gt;
Da ist meiner Liebsten Haus.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这首歌的名字叫做&lt;em&gt;Wasserflut&lt;/em&gt;，中文通译为“洪水”，我觉得并不准确。也有人取诗的意境，译为“泪河”，算是差强人意。&lt;/p&gt;

&lt;p&gt;舒伯特冬之旅在国内还是蛮有名的声乐套曲，这首小诗的中译也很容易找到，我从豆瓣上摘录一个版本：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我眼中的泪水，  &lt;br /&gt;
滴滴洒在雪地上；  &lt;br /&gt;
冰雪却吮饮着，  &lt;br /&gt;
我燃烧的悲伤。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;大地返青的时候，  &lt;br /&gt;
会吹来温暖的和风，  &lt;br /&gt;
会融化深深的积雪，  &lt;br /&gt;
会打破坚硬的冰封。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;雪花啊，你懂得我的渴望，  &lt;br /&gt;
告诉我你要奔去的方向！  &lt;br /&gt;
还是随着我的泪水，  &lt;br /&gt;
顺着小溪流淌。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;它会带你经过村庄，  &lt;br /&gt;
穿过喧闹的街道。  &lt;br /&gt;
要是觉得泪水发烫，  &lt;br /&gt;
就是到了她的屋旁。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我读完了这首小诗，首先联想到的是《简·爱》里绝望的哀叹：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The waters came into my soul; I sank in deep mire: I felt no standing; I came into deep waters; the floods overflowed me. (诗篇 69:2)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;《冬之旅》原是德国诗人威廉·穆勒的诗作，写的是一个失恋者在冬天里的孤独旅行。通常认为，诗作中失恋的主人公就是作者自己。舒伯特写作这部声乐套曲时已然罹患梅毒，大概自知时日不多。两个忧郁晦暗的灵魂遇在一起，造就了这部深沉的悲歌。我听着这首歌，感觉也像简·爱一样“sank in to deep mire”。&lt;/p&gt;

&lt;p&gt;人是喜欢悲歌的。古希腊酒神祭典上，演的是《俄狄浦斯王》这样崇高壮美的悲剧；贝多芬的《英雄》，最感人至深的是第二乐章的葬礼进行曲；中国古代有“为赋新词强说愁”的说法；杜甫的诗歌为人传诵，后人誉之，也只用“沉郁顿挫”四字。&lt;/p&gt;

&lt;p&gt;最近读朱光潜的《诗论》，里面提及尼采《悲剧的诞生》，解释了这种艺术现象。我摘抄一段朱先生的评论如下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;宇宙与人类生命，像叔本华所分析的，含有意志（will）和意象（idea）两个要素。有意志即有需求，有情感，需求与情感即为一切苦恼悲哀之源。人永远不能由自我与其所带意志中拔出，所以生命永远是一种苦痛。生命苦痛的救星即为意象。意象是意志的外射或对象化（objectivation），有意象则人取得超然地位，凭高俯视意志的挣扎，恍然彻悟这光怪陆离的形象大可以娱目赏心。…… 他们转移阿波罗的明镜来照临狄奥尼索斯的痛苦挣扎，于是意志外射于意象，痛苦赋形为庄严优美，结果乃有希腊悲剧的产生。…… 人生世相充满着缺陷、灾祸、罪孽；从道德观点看，它是恶的；从艺术观点看，它可以是美的，悲剧是希腊人从艺术观点在缺陷、灾祸、罪孽中看到的美的形象。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;朱先生又说：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;诗是情趣的流露，或者说，是狄奥尼索斯精神的焕发。但是情趣每不能流露于诗，因为诗的情趣并不是生糙自然的情趣，它必定经过一番冷静的观照和熔化洗练的功夫，它须受过阿波罗的洗礼。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;《冬之旅》恰是这种经阿波罗洗礼的狄奥尼索斯精神的绝佳体现。诗篇在讲爱情失却的忧伤，却借题于“冬之旅”，在对冬季风物的描写中投射入自己的感慨，亦即“转移阿波罗的明镜来照临狄奥尼索斯的痛苦挣扎”。诗篇清新宁静，不着痕迹，却感人至深。舒伯特的音乐，也多反映德奥民歌的这种风格，寓丰富的情感于古典主义音乐的技法之下。没有华丽的技巧，但想要揣度音乐发展的微妙意图，却往往要下一番苦功。&lt;/p&gt;

&lt;p&gt;此般精妙，若与歌剧对比，则更为明显。同样是慨叹失恋的悲哀，鲁杰罗·莱翁卡瓦洛的歌剧《小丑》中咏叹调Vesti la giubba的唱词是这样的：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Recitar! Mentre preso dal delirio, &lt;br /&gt;
non so più quel che dico, &lt;br /&gt;
e quel che faccio! &lt;br /&gt;
Eppur è d’uopo, sforzati! &lt;br /&gt;
Bah! Sei tu forse un uom? &lt;br /&gt;
Tu se’ Pagliaccio!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Vesti la giubba e la faccia infarina. &lt;br /&gt;
La gente paga, e rider vuole qua. &lt;br /&gt;
E se Arlecchin t’invola Colombina, &lt;br /&gt;
ridi, Pagliaccio, e ognun applaudirà! &lt;br /&gt;
Tramuta in lazzi lo spasmo ed il pianto &lt;br /&gt;
in una smorfia il singhiozzo e ‘l dolor, Ah!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ridi, Pagliaccio, &lt;br /&gt;
sul tuo amore infranto! &lt;br /&gt;
Ridi del duol, che t’avvelena il cor!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我没有找到中译，这里从Wikipedia摘录一段英文翻译：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Recite! While in delirium, &lt;br /&gt;
I no longer know what I say, &lt;br /&gt;
and what I do! &lt;br /&gt;
And yet it’s necessary… make an effort! &lt;br /&gt;
Bah! Are you a man? &lt;br /&gt;
You are a clown!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Put on your costume and powder your face. &lt;br /&gt;
The people pay, and they want to laugh. &lt;br /&gt;
And if Harlequin shall steal your Columbina, &lt;br /&gt;
laugh, clown, and all will applaud! &lt;br /&gt;
Turn your distress and tears into jest, &lt;br /&gt;
your pain and sobbing into a funny face – Ah!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Laugh, clown, &lt;br /&gt;
at your broken love! &lt;br /&gt;
Laugh at the grief that poisons your heart!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;单看唱词，大致也能体会其中差异：《冬之旅》多移情于景，《小丑》则直抒胸臆。&lt;/p&gt;

&lt;p&gt;我第一次注意到这首咏叹调，是在听帕瓦罗蒂1989年演出时录音的时候。帕瓦罗蒂对这段咏叹调的演绎，感情十分饱满，把一个在命运浮沉中仍要强颜欢笑的小人物的内心世界表现得淋漓尽致。尤其咏叹调结束时乐队奏响第一幕终曲时，小丑对镜化妆时的几声抽泣，可谓锦上添花。然而跟迪斯考的《冬之旅》演绎比起来，这种直白的情感表达，似乎略显“生糙自然”。当然，歌剧和艺术歌曲，本身就是两种不同的艺术形式，并无高下之分。我更愿意把两种表现形式理解为美的两种不同形式，一种是更接近酒神精神的，受意志与情感支配的美；一种是更接近阿波罗的，受意象和理性支配的美。这样看来，歌剧发源于意大利，艺术歌曲（其名称Lied即是德语“歌曲”）发源于德奥，大约也非偶然，与两个民族的性格或有千丝万缕的联系。&lt;/p&gt;

&lt;p&gt;东方民族历史悠久，艺术里理性的气息往往也更重，中国古诗词里借景抒情的例子比比皆是。徐志摩的新诗，虽不再受旧有艺术形式的束缚，但对超然的、纯意象的美的追求却没有停止。《志摩的诗》第一首《雪花的快乐》，几近此境。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;假如我是一朵雪花， &lt;br /&gt;
翩翩的在半空里潇洒， &lt;br /&gt;
我一定认清我的方向—— &lt;br /&gt;
飞飏，飞飏，飞飏—— &lt;br /&gt;
这地面上有我的方向。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;不去那冷寞的幽谷， &lt;br /&gt;
不去那凄清的山麓， &lt;br /&gt;
也不上荒街去惆怅—— &lt;br /&gt;
飞飏，飞飏，飞飏—— &lt;br /&gt;
你看，我有我的方向！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;在半空里娟娟地飞舞， &lt;br /&gt;
认明了那清幽的住处， &lt;br /&gt;
等着她来花园里探望—— &lt;br /&gt;
飞飏，飞飏，飞飏—— &lt;br /&gt;
啊，她身上有朱砂梅的清香！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;那时我凭借我的身轻， &lt;br /&gt;
盈盈地，沾住了她的衣襟， &lt;br /&gt;
贴近她柔波似的心胸—— &lt;br /&gt;
消溶，消溶，消溶—— &lt;br /&gt;
溶入了她柔波似的心胸！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;《泪河》中，诗歌前两节写意象，后两节把情趣投射于意象。《雪花的快乐》里，“投射”的过程第一句就完成了，此后则都是对意象的描写。然而，情趣又在作者的描写里表现出来：“幽谷”是冷寞的，“山麓”是凄清的，至于街也只是“荒街”，走在上面只是“惆怅”，而只有爱人的“柔波似的心胸”是雪花的方向，至于最后消融其中。这印证了《诗论》里朱光潜关于意象和情趣辩证关系的讨论。徐志摩选取意象之纯熟，令人惊叹，而最后从“飞飏”到“消溶”的转变，也十分巧妙，看似自然的安排，背后却有“生命诚可贵，爱情价更高”的强烈情感。寓强大张力于云淡风轻之间，这样超然的诗，如茅盾所说，“非徐志摩不能作”。&lt;/p&gt;

&lt;p&gt;这首诗被台湾作曲家周鑫泉谱成合唱曲，从最基本的C调开始，在主题发展的过程中用了四次转调表现诗歌微妙的色彩变化，到了末尾，虽然回到C调，和弦已经从最开始的主三和弦移到了变和弦上，张力大大增强。我在大四时，虽不再参加合唱团演出，仍不时回来排练，每每唱到男低声部“不去那冷寞的幽谷”处急剧的转调，脑中浮现出柳宗元形容小石潭“凄神寒骨，悄怆幽邃”的句子，总不由得皱起眉头。诗与音乐本就同源，这样的好诗配上这样的谱曲，若还不能引人触动，这样的意志情趣，大概也就真的无人可知了吧。&lt;/p&gt;

&lt;p&gt;5月22日 &lt;br /&gt;
西大学公寓&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://phding.com/digest-and-random-words/&quot;&gt;摘抄与随笔&lt;/a&gt; was originally published by sd at &lt;a href=&quot;http://phding.com&quot;&gt;PHDING&lt;/a&gt; on May 22, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[巴城的雪]]></title>
  <link rel="alternate" type="text/html" href="http://phding.com/the-snow-of-baltimore/" />
  <id>http://phding.com/the-snow-of-baltimore</id>
  <published>2015-03-07T01:55:30-05:00</published>
  <updated>2015-03-07T01:55:30-05:00</updated>
  <author>
    <name>sd</name>
    <uri>http://phding.com</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;巴城又落雪了。&lt;/p&gt;

&lt;p&gt;已是三月了，故国的朋友们开始奔走传播春天的消息。南方的鲜花已经热烈地绽放，北方的杨树也开始抽芽。春节过了，农户们开始张罗着翻耕播种，打工者们踏上返回城市的列车，就连长途迁徙的燕子都开始新一年的奔波，好一片辞旧迎新的气象。&lt;/p&gt;

&lt;p&gt;而在巴城，从二月开始，几乎我每天走出公寓，都只看到一片纷纷扬扬的大雪。&lt;/p&gt;

&lt;p&gt;故国的雪我是喜欢的。北京的冬天，往往几个月没有降水，气候干燥的出奇。每每下一场雪，就有几天稍微湿润的天气。我在北京总盼着下雪，却总是不能遂愿。&lt;/p&gt;

&lt;p&gt;初到巴城，感觉这里的气候和北京差不多，到了冬天才发现这里要湿润不少。到了一月，雪下个不停，上一场还没有全化，下一场又接踵而至。于是路边的雪堆叠起来，往往成了雪山，以至于把供人休息的长椅都一并掩埋。&lt;/p&gt;

&lt;p&gt;家父说，雪下的多，湿润一些自然是好事。可我却高兴不起来。&lt;/p&gt;

&lt;p&gt;我仔细嗅着空气里的味道。故国雪后的空气，唯有清冷柔软两词可以形容，这里却只剩了冷。就好像喝惯了故国茶香馥郁夹带甜味的滇红，有一天突然发现只剩下涩到口干的立顿茶包可以喝了。&lt;/p&gt;

&lt;p&gt;几周前的一天我在黑客楼吃完午饭站在窗前喝茶，看到两只金丝雀在枝桠上轻巧地蹦来蹦去。枝桠为这小小的生命颤抖，积雪都落了三分。我隔着厚厚的双层隔热窗，听不到它们愉快的歌，却能看到他们骄傲的神色。&lt;/p&gt;

&lt;p&gt;我开始担心会不会在路边的雪堆里看到被冻僵的尸体，但几天过去，非但没有看到，枝桠上的金丝雀倒是越来越多。公寓单薄的窗户外，渐渐早晨也有叽叽喳喳的叫声了。我早晨起来一边吃着面包，一边站在暖气片上向外张望。偶尔我也带一点面包下去，装作不经意地放在枝桠下的空地上。&lt;/p&gt;

&lt;p&gt;我虽然宁愿它们暂时飞去更温暖的地方，却也保留着希望他们常来这觅食闲聊的小小私心。&lt;/p&gt;

&lt;p&gt;巴城尚在落雪，可故国的春天还是在这里悄悄地萌发了。&lt;/p&gt;

&lt;p&gt;3月7日凌晨&lt;br /&gt;
西大学公寓&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://phding.com/the-snow-of-baltimore/&quot;&gt;巴城的雪&lt;/a&gt; was originally published by sd at &lt;a href=&quot;http://phding.com&quot;&gt;PHDING&lt;/a&gt; on March 07, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Random Words]]></title>
  <link rel="alternate" type="text/html" href="http://phding.com/random-words/" />
  <id>http://phding.com/random-words</id>
  <published>2014-12-07T00:18:46-05:00</published>
  <updated>2014-12-07T00:18:46-05:00</updated>
  <author>
    <name>sd</name>
    <uri>http://phding.com</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;Last night I went to the concert of Hopkins Symphony Orchestra.&lt;br /&gt;
The orchestra, to my surprise, is very professional and well-trained.&lt;br /&gt;
The Mendelsson’s violin concerto, one of my favorites, is well rendered, despite that to me the violinist is a little bit overwhelmed, and there are several gaps where the orchestra and the violinist are disjoint.&lt;br /&gt;
But anyway, this is a live performance and it’s unfair to compare them with those legendary recordings such as that of Kyung Wha Cheung.&lt;/p&gt;

&lt;p&gt;However, the most impressive part throughout the concert is not the music itself.&lt;br /&gt;
At the beginning of the second half, instead of starting right away, the conductor first took over the microphone and said a few words about the Ferguson incident.&lt;br /&gt;
The last sentence he said was (this is an approximate quote since I don’t really remember the exact words):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We have already witnessed so much violence in this country. But we will continue playing our music, and even in a way that is more moving and beautiful.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This reminded me of a clip from &lt;em&gt;Władysław Szpilman&lt;/em&gt;’s book &lt;em&gt;The pianist&lt;/em&gt; I happend to have read a few days ago:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;One day, around 5th August, when I had taken a brief rest from work and was walking down Gęsia Street, I happened to see Janusz Korczak and his orphans leaving the ghetto. The evacuation of the Jewish orphanage run by Janusz Korczak had been ordered for that morning.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The children were to have been taken away alone. He had the chance to save himself, and it was only with difficulty that he persuaded the Germans to take him too. He had spent long years of his life with children and now, on this last journey, he could not leave them alone. He wanted to ease things for them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;He told the orphans they were going out into the country, so they ought to be cheerful. At last they would be able to exchange the horrible suffocating city walls for meadows of flowers, streams where they could bathe, woods full of berries and mushrooms. He told them to wear their best clothes, and so they came out into the yard, two by two, nicely dressed and in a happy mood.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The little column was led by an SS man who loved children, as Germans do, even those he was about to see on their way into the next world. He took a special liking to a boy of twelve, a violinist who had his instrument under his arm. The SS man told him to go to the head of the procession of children and play – and so they set off.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;When I met them in Gęsia Street, the smiling children were singing in chorus, the little violinist was playing for them and Korczak was carrying two of the smallest infants, who were beaming too, and telling them some amusing story.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;I am sure that even in the gas chamber, as the Zyklon B gas was stifling childish throats and striking terror instead of hope into the orphans’ hearts, the Old Doctor must have whispered with one last effort, ‘it’s all right, children, it will be all right’. So that at least he could spare his little charges the fear of passing from life to death.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Music never outvoice the growling of “state apparatus”.&lt;br /&gt;
But we need it all the time.&lt;br /&gt;
Because even in the darkest of hours, it still gives us hope.&lt;/p&gt;

&lt;p&gt;That’s why we love it.&lt;/p&gt;

&lt;p&gt;And there flows the disturbed opening of “Romeo and Juliet Overture”.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://phding.com/random-words/&quot;&gt;Random Words&lt;/a&gt; was originally published by sd at &lt;a href=&quot;http://phding.com&quot;&gt;PHDING&lt;/a&gt; on December 07, 2014.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Hello MathJax]]></title>
  <link rel="alternate" type="text/html" href="http://phding.com/hello-mathjax/" />
  <id>http://phding.com/hello-mathjax</id>
  <published>2014-11-27T22:12:30-05:00</published>
  <updated>2014-11-27T22:12:30-05:00</updated>
  <author>
    <name>sd</name>
    <uri>http://phding.com</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;Just get the configuration done. Let’s give a try.&lt;br /&gt;
\[p(Y\,|\,X) = \dfrac{p(X\,|\,Y)p(Y)}{p(X)}\]&lt;br /&gt;
Yep you’re right. I love Bayesian statistics.&lt;br /&gt;
I believe good graphical models are able to make the best of both linguistic knowledge and statistical properties.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://phding.com/hello-mathjax/&quot;&gt;Hello MathJax&lt;/a&gt; was originally published by sd at &lt;a href=&quot;http://phding.com&quot;&gt;PHDING&lt;/a&gt; on November 27, 2014.&lt;/p&gt;
  </content>
</entry>

</feed>
