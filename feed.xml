<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">PHDING</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://phding.com/feed.xml" />
<link rel="alternate" type="text/html" href="http://phding.com" />
<updated>2015-11-05T19:58:15-05:00</updated>
<id>http://phding.com/</id>
<author>
  <name>Chombear</name>
  <uri>http://phding.com/</uri>
  <email>shuoyangd@gmail.com</email>
</author>


  

<entry>
  <title type="html"><![CDATA[Setup YouCompleteMe For C++ Programming]]></title>
  <link rel="alternate" type="text/html" href="http://phding.com/setup-youcompleteme-for-c-plus-plus-programming/" />
  <id>http://phding.com/setup-youcompleteme-for-c-plus-plus-programming</id>
  <published>2015-09-07T22:37:32-04:00</published>
  <updated>2015-09-07T22:37:32-04:00</updated>
  <author>
    <name>Chombear</name>
    <uri>http://phding.com</uri>
    <email>shuoyangd@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;To start with, visit the &lt;a href=&quot;https://github.com/Valloric/YouCompleteMe&quot;&gt;Github page&lt;/a&gt; and read through the section with the (sarcastic) title “Mac OS X super-quick installation”. Particularly pay attention to the part that has something to do with C Family language, as I quote:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you want C-family completion, you MUST have the latest Xcode installed along with the latest Command Line Tools (they are installed when you start Xcode for the first time).&lt;/p&gt;

  &lt;p&gt;Install CMake. Preferably with &lt;a href=&quot;http://mxcl.github.com/homebrew/&quot;&gt;Homebrew&lt;/a&gt;, but here’s the &lt;a href=&quot;http://www.cmake.org/download/&quot;&gt;stand-alone CMake installer&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another thing to check for is whether you are running a Vim version higher than 7.3.584. To check for your version, just run &lt;code&gt;vi --version | head -1&lt;/code&gt; or start Vim without specifying a file to open. The YouCompleteMe document requires you to use MacVim but from my own experience a Vim with python2.x support will also work. To check whether you have python2.x support, run &lt;code&gt;vi --version | grep &#39;+python&#39;&lt;/code&gt;. If the output is not null, you’re good to go.&lt;/p&gt;

&lt;p&gt;Having finished all these preparations, type the following command to compile YCM:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/.vim/bundle/YouCompleteMe
./install.sh --clang-completer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OK. Now you have installed YCM, but this is not the end of the story. Because to actually make YCM to work for your C++ program, you’ll have to write a &lt;code&gt;.ycm_extra_conf.py&lt;/code&gt; file in your project directory, to point your plugin to all the libraries you would like to use in your program. Fortunately you don’t really have to write it, at least most of the time – you can have it generated automatically, using &lt;a href=&quot;https://github.com/rdnetto/YCM-Generator&quot;&gt;YCM-Generator&lt;/a&gt;. Don’t attempt to use Vundle to install it, just &lt;code&gt;git clone&lt;/code&gt; to somewhere and you are done.&lt;/p&gt;

&lt;p&gt;What this generator does is reading the makefile in your project directory and translate the setup of your build into the setup of your auto-completion plugin. Now here is the problem: how would your plugin know where is your C++ standard library? Well the fact is your plugin won’t automatically know, and your YCM-Generator won’t either – you have to tell them.&lt;/p&gt;

&lt;p&gt;So you’ll have to know where does the C++ library locate in your machine. Type &lt;code&gt;`gcc -print-prog-name=cpp` -v&lt;/code&gt; into your terminal, you should be able to get something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Apple LLVM version 6.1.0 (clang-602.0.53) (based on LLVM 3.6.0svn)
Target: x86_64-apple-darwin14.4.0
Thread model: posix
 &quot;/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang&quot; -cc1 -triple x86_64-apple-macosx10.10.0 -E -disable-free -disable-llvm-verifier -main-file-name - -mrelocation-model pic -pic-level 2 -mdisable-fp-elim -masm-verbose -munwind-tables -target-cpu core2 -target-linker-version 242.2 -v -dwarf-column-info -resource-dir /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/clang/6.1.0 -I /usr/include -fdebug-compilation-dir /Users/shuoyang/Workspace/cs161/hw4 -ferror-limit 19 -fmessage-length 158 -stack-protector 1 -mstackrealign -fblocks -fobjc-runtime=macosx-10.10.0 -fencode-extended-block-signature -fmax-type-align=16 -fdiagnostics-show-option -fcolor-diagnostics -traditional-cpp -o - -x c -
clang -cc1 version 6.1.0 based upon LLVM 3.6.0svn default target x86_64-apple-darwin14.4.0
ignoring duplicate directory &quot;/usr/include&quot;
  as it is a non-system directory that duplicates a system directory
#include &quot;...&quot; search starts here:
#include &amp;lt;...&amp;gt; search starts here:
 /usr/local/include
 /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/clang/6.1.0/include
 /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include
 /usr/include
 /System/Library/Frameworks (framework directory)
 /Library/Frameworks (framework directory)
End of search list.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What you should be care about is the following part:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &quot;...&quot; search starts here:
#include &amp;lt;...&amp;gt; search starts here:
 /usr/local/include
 /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/clang/6.1.0/include
 /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include
 /usr/include
 /System/Library/Frameworks (framework directory)
 /Library/Frameworks (framework directory)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These are the places where your C++ compiler would search for when they build your C++ programs, so naturally, you should tell your auto-completion program to search the same place as well. To do this, go to your YCM-Generator directory and find &lt;code&gt;template.py&lt;/code&gt;. As the name suggests, this is the “template” your generator use to generate your auto-completion comfiguration file. Find the &lt;code&gt;flags&lt;/code&gt; variable (which is a python list) at the beginning of the source file, add your include directories like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;a name=&quot;True-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;a name=&quot;True-2&quot;&gt;&lt;/a&gt;	&lt;span class=&quot;s&quot;&gt;&amp;#39;-isystem&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;a name=&quot;True-3&quot;&gt;&lt;/a&gt;	&lt;span class=&quot;s&quot;&gt;&amp;#39;/path/to/your/first/system/include/directory&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;a name=&quot;True-4&quot;&gt;&lt;/a&gt;	&lt;span class=&quot;s&quot;&gt;&amp;#39;-isystem&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;a name=&quot;True-5&quot;&gt;&lt;/a&gt;	&lt;span class=&quot;s&quot;&gt;&amp;#39;/path/to/your/second/system/include/directory&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;a name=&quot;True-6&quot;&gt;&lt;/a&gt;	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;a name=&quot;True-7&quot;&gt;&lt;/a&gt;	&lt;span class=&quot;s&quot;&gt;&amp;#39;-I&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;a name=&quot;True-8&quot;&gt;&lt;/a&gt;	&lt;span class=&quot;s&quot;&gt;&amp;#39;/path/to/your/first/local/include/directory&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;a name=&quot;True-9&quot;&gt;&lt;/a&gt;	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;a name=&quot;True-10&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In short, the &lt;code&gt;-isystem&lt;/code&gt; tag precedes all the system library paths, while &lt;code&gt;-I&lt;/code&gt; precedes all the local include directories. Keep in mind that this is a template so you shouldn’t add any project-specific paths in there. Personally, I only add &lt;code&gt;.&lt;/code&gt; to the local include directories in &lt;code&gt;template.py&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When you generate configuration files for your project with YCM-Generator, you should run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;/path/to/YCM-Generator/config_gen.py /path/to/project
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s not too hard, isn’t it? Regretfully, when I write this post, YCMGenerator only supports four build systems: &lt;code&gt;make&lt;/code&gt; &lt;code&gt;cmake&lt;/code&gt; &lt;code&gt;qmake&lt;/code&gt; and &lt;code&gt;autotools&lt;/code&gt;. Now what should we do if we are using building systems other than these four? Well, apparently we’ll have to do some hacking by ourselves, but from my own experience with &lt;em&gt;bjam&lt;/em&gt; (the boost building system), once you get the system and local include path correct, YCM is mostly able to work.&lt;/p&gt;

&lt;p&gt;This concludes our configuration for YCM. Open a C++ project and start Viming.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://phding.com/setup-youcompleteme-for-c-plus-plus-programming/&quot;&gt;Setup YouCompleteMe For C++ Programming&lt;/a&gt; was originally published by Chombear at &lt;a href=&quot;http://phding.com&quot;&gt;PHDING&lt;/a&gt; on September 07, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Setup For C++ Programming Under OS X Command Line]]></title>
  <link rel="alternate" type="text/html" href="http://phding.com/setup-for-c-plus-plus-programming-under-os-x-command-line/" />
  <id>http://phding.com/setup-for-c-plus-plus-programming-under-os-x-command-line</id>
  <published>2015-09-06T21:23:37-04:00</published>
  <updated>2015-09-06T21:23:37-04:00</updated>
  <author>
    <name>Chombear</name>
    <uri>http://phding.com</uri>
    <email>shuoyangd@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Recently I’m converting from a clan called Java back to something else called C++, in which I believed so profoundly three years ago.&lt;/p&gt;

&lt;p&gt;The past three years witnessed more changes apart from the my religion for programming languages, but also my whole programming workflow as well.&lt;br /&gt;
I’m now a OS X user and a command line enthusiast, while three years ago I was still struggling between Windows &amp;amp; Ubuntu and was an IDE advocate (by the way I still find Visual Studio 2010 the best C++ IDE I’ve ever used).&lt;/p&gt;

&lt;p&gt;So there is gonna be some change. Let’s get going.&lt;/p&gt;

&lt;h3 id=&quot;environment&quot;&gt;Environment&lt;/h3&gt;
&lt;p&gt;The environment comes with the package &lt;em&gt;Xcode Command Line Tools&lt;/em&gt;. It has the compiler, library, debugger… everything &lt;em&gt;essential&lt;/em&gt; a system should provide to program C++. That being said, &lt;strong&gt;I personally recommend installing the full Xcode package&lt;/strong&gt;, since at times you’ll need more than that. Yes it takes around 7 gigabytes of disk, but to make your life easier, it worths that space.&lt;/p&gt;

&lt;p&gt;As you may expect, the toolkit is contained in the full Xcode package. But for Xcode 4.3 and later, it is no longer automatically installed, so don’t assume you have installed it if you saw Xcode on your machine.&lt;/p&gt;

&lt;p&gt;So how do you know you have already installed Xcode command line tools? As introduced in &lt;a href=&quot;http://railsapps.github.io/xcode-command-line-tools.html&quot;&gt;this&lt;/a&gt; very nice tutorial and my own experience, there are three options:&lt;/p&gt;

&lt;p&gt;Check if you have installed Xcode full package. Just type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xcode-select -p
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to your terminal. If you see the following line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/Applications/Xcode.app/Contents/Developer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It means you have installed the Xcode full package, and you are good to go. If you instead see this line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/Library/Developer/CommandLineTools
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It means you have installed the Xcode commnad line tool, you are also good to go.&lt;/p&gt;

&lt;p&gt;Or you can type &lt;code&gt;gcc&lt;/code&gt; to your terminal, you might see the prompt that say something like “gcc requires you to install command line developer tools” and ask if you want to install. Just say yes, and after the installation process you’ll have the developer tools package in your machine.&lt;/p&gt;

&lt;p&gt;You can also open the Xcode application and go to the preferences window. Proceed to the download section and if you see a install button next to the command line tools, it means you haven’t install the command line tools or at least your tool is not up to date. Press the button to install/update the tool and you are done.&lt;/p&gt;

&lt;h3 id=&quot;editor&quot;&gt;Editor&lt;/h3&gt;
&lt;p&gt;OK here is the embarrassing moment: I use Vim myself, and so for those Emacs users, I won’t teach you how to set up editor unless you convert to Vim :)&lt;/p&gt;

&lt;p&gt;For Vim users, I assume you have the basic plugins such as &lt;code&gt;NerdTree&lt;/code&gt;, &lt;code&gt;Vundle&lt;/code&gt; and &lt;code&gt;Syntastic&lt;/code&gt; (if you don’t know what I’m talking about I suggest you to look at &lt;a href=&quot;http://haridas.in/vim-as-your-ide.html&quot;&gt;this&lt;/a&gt; and do a little personalization with your vim first). What I would like to recommend here for C++ programming are these two plugins: &lt;a href=&quot;https://github.com/Valloric/YouCompleteMe&quot;&gt;YouCompleteMe&lt;/a&gt; and &lt;a href=&quot;http://ctags.sourceforge.net/&quot;&gt;ctags&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Under Mac OS X, you may want to use &lt;code&gt;MacVim&lt;/code&gt; instead of &lt;code&gt;Vim&lt;/code&gt;, since it often comes with most complete support customized for Mac OS X (such as python). You can use it like gVim in a graphical interface, or invoke &lt;code&gt;mvim -v&lt;/code&gt; to use it within the terminal. You can even mimic Vim by setting an alias &lt;code&gt;alias vim=&#39;mvim -v&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;youcompleteme-ycm&quot;&gt;YouCompleteMe (YCM)&lt;/h4&gt;
&lt;p&gt;Trust me – I’ve tried many, many different auto-completion plugins in Vim, since the time when I was still sticked to Java. The story is, most of the plugins &lt;em&gt;claim&lt;/em&gt; they can do something amazing, but they either just suck or take forever to get the configuration correct (at least for me). YouCompleteMe is the first and the only auto-completion plugin that I managed to set up correctly on my Vim and that makes me feel it gets its work done.&lt;/p&gt;

&lt;p&gt;The setup for YouCompleteMe is somewhat tricky, and at times its documentation is not perfect. To avoid diverging too far in this post, I set aside an individual post for the procedure. If you are interested, read it &lt;a href=&quot;http://phding.com/setup-youcompleteme-for-c-plus-plus-programming/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;ctags&quot;&gt;ctags&lt;/h4&gt;
&lt;p&gt;ctags is a must-have if you often deal with large projects. Strictly speaking it is not a Vim plugin, in fact you can use it with Emacs or gedit. But since Vim is the best editor in the world, you should use it with Vim ;)&lt;/p&gt;

&lt;p&gt;For the definition of ctags, let me quote the definition from the &lt;a href=&quot;http://ctags.sourceforge.net/&quot;&gt;official website&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ctags generates an index (or tag) file of language objects found in source files that allows these items to be quickly and easily located by a text editor or other utility. A tag signifies a language object for which an index entry is available (or, alternatively, the index entry created for that object).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These tags will be generated into a file called &lt;code&gt;tags&lt;/code&gt; (by default). When you search for the definition of a variable / the invocations of a function, Vim will read this &lt;code&gt;tags&lt;/code&gt; file and point you to the place(s) you should look at. That’s why it is especially useful for large projects – you’ll need to figure out what variables / functions actually do from time to time.&lt;/p&gt;

&lt;p&gt;To start using ctags, download the source package from the &lt;a href=&quot;http://ctags.sourceforge.net/&quot;&gt;official website&lt;/a&gt;. &lt;code&gt;cd&lt;/code&gt; to the directory of your source package and run the following script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./configure
make
make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are working on a server, you may want to substitute the first line with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./configure --prefix=/path/to/a/local/directory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;so that you don’t have to fiddle with the &lt;code&gt;sudo&lt;/code&gt; previlege.&lt;/p&gt;

&lt;p&gt;After installation, check your version with &lt;code&gt;ctags --version&lt;/code&gt;. If you see something start with &lt;code&gt;Exuberant Ctags&lt;/code&gt;, you are fine. If not, you probably have some older version ctags and you are still running that older version. So you may probably need to remove the older version before install again, or overwrite your &lt;code&gt;PATH&lt;/code&gt; variable to overwrite the path to your older version.&lt;/p&gt;

&lt;p&gt;To generate tags file, most often you’ll &lt;code&gt;cd&lt;/code&gt; to your codebase and run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ctags -R .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;-R&lt;/code&gt; option tells ctags that you want to search recursively into the sub-directories of your codebase.&lt;/p&gt;

&lt;p&gt;Now you have the tag file for your codebase, you can start to code in Vim. To search for a tag, move your cursor to a function / a class / a variable name and type &lt;code&gt;ctrl + ]&lt;/code&gt;, and you’ll be tranferred to the first tag in the list. If it is not desired, type &lt;code&gt;g + ctrl + ]&lt;/code&gt; instead to see the whole tag list. To return from the transferred postion, type &lt;code&gt;ctrl + t&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;compiler&quot;&gt;Compiler&lt;/h3&gt;
&lt;p&gt;If you set up the environment (Xcode Command Line Tools) correctly, you should have both &lt;code&gt;clang&lt;/code&gt; and &lt;code&gt;gcc&lt;/code&gt;. I personally slightly prefer &lt;code&gt;gcc&lt;/code&gt; for more complete language support, more optimization options and better compatibility for some projects. But I’ve also heard that &lt;code&gt;clang&lt;/code&gt; might generate more detailed error messages. It’s up to you which to choose.&lt;/p&gt;

&lt;p&gt;Note that if you use YouCompleteMe, you must have clang ready on your machine, since it has a clang-based engine.&lt;/p&gt;

&lt;h3 id=&quot;debugger&quot;&gt;Debugger&lt;/h3&gt;
&lt;p&gt;Save yourself the endless trouble and use &lt;code&gt;lldb&lt;/code&gt; instead of &lt;code&gt;gdb&lt;/code&gt;. &lt;code&gt;lldb&lt;/code&gt; defaults to the OS X environment and is very similar to &lt;code&gt;gdb&lt;/code&gt; except some differences in commands. In case you are wondering, &lt;a href=&quot;http://lldb.llvm.org/lldb-gdb.html&quot;&gt;here&lt;/a&gt; is a very useful chart to show these differences. You can also use this chart as a cheat sheet for common operations.&lt;/p&gt;

&lt;p&gt;To start debugging an executable, type &lt;code&gt;lldb /path/to/executable&lt;/code&gt; to your terminal to start the debugger. Setup the breakpoints and other stuff and type &lt;code&gt;run&lt;/code&gt; to actually start the program. You can add any argument you want to pass to the program after the &lt;code&gt;run&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Two more tips with the debugger in case you are new to command line workflow: remember to compile your program with -g option to enable variable inspection; the command to exit &lt;code&gt;lldb&lt;/code&gt; or &lt;code&gt;gdb&lt;/code&gt; is &lt;code&gt;quit&lt;/code&gt; ;)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I understand that this tutorial is error-prone and by no means complete. If you have any suggestions on how to make this tutorial more practical, leave a note in the comments and we can discuss!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://phding.com/setup-for-c-plus-plus-programming-under-os-x-command-line/&quot;&gt;Setup For C++ Programming Under OS X Command Line&lt;/a&gt; was originally published by Chombear at &lt;a href=&quot;http://phding.com&quot;&gt;PHDING&lt;/a&gt; on September 06, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[The Snow of Baltimore]]></title>
  <link rel="alternate" type="text/html" href="http://phding.com/the-snow-of-baltimore/" />
  <id>http://phding.com/the-snow-of-baltimore</id>
  <published>2015-03-07T01:55:30-05:00</published>
  <updated>2015-03-07T01:55:30-05:00</updated>
  <author>
    <name>Chombear</name>
    <uri>http://phding.com</uri>
    <email>shuoyangd@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Baltimore is snowing again.&lt;/p&gt;

&lt;p&gt;It’s already March. Friends in my home country starts to spread the news of spring. I could even see the flowers in the southern China blooming, while the poplar in the north starting to sprout. The spring festival is over, the pesants are plowing and sowing in their lands, migrant workers stepping onto the trains to go back to the cities. Even the swallows are flying back to the north to start a new year. In a word, this is the moment you’ll wave goodbye to the past year and “March” on.&lt;/p&gt;

&lt;p&gt;Nevertheless, in Baltimore, almost everyday after Februry, when I walk out my apartment I see only a world of floating snow flakes.&lt;/p&gt;

&lt;p&gt;I do like the snow in my home country. The winter in Beijing often lasts for months without precipitation, which makes the weather extraordinarily dry. But every time there is a snow, some nice humid days would follow. I was always eagerly expecting snow when I was in Beijing, but my hope was rarely fulfilled.&lt;/p&gt;

&lt;p&gt;When I just arrived in Baltimore, I thought the weather here is similar to that of Beijing – only to find this place is actually much more humid in winter. As January approaches, the snow just keeps going on. Before the remaining snow melt, the next one follows in a hasty manner. In the end, the snow pile up on the road side, growing into small hills, even burying the benches reserved for the pedestrian.&lt;/p&gt;

&lt;p&gt;My father said to me, “Doesn’t the snow make the weather more humid? Just cheer up”. But I can’t.&lt;/p&gt;

&lt;p&gt;I carefully smell the air.  Back in my home country, the snow-soaked air could only be described by the Chinese word “清冷柔软”(clear, cool and soft), but here, it is nothing more than the chill. It feels like you are so used to the rich and slightly sweet flavor of DianHong tea (the tea produced in “Dian”, i. e.  Yunnan Province in China), but one day you suddenly find out the only option left for tea is the astringent Lipton.&lt;/p&gt;

&lt;p&gt;Weeks ago on some day I just finished my lunch, and was drinking tea beside the window of the common area in Hackerman Hall, when I saw two canaries deftly bouncing on the thin branches.  The branches trembled for the tiny creature, even shook off the accumulating snow. I stood behind the thick double-layer insulated window, and I couldn’t hear their joyful songs – but yet I could see the proud looks in their eyes.&lt;/p&gt;

&lt;p&gt;I started to worry that one day I may see their frozen bodies in the snow piles on the road side.  But several days passed, instead of seeing the corps, there are actually more canaries on the branches. Outside the shabby window of my apartment, there are also, gradually, chirps in the early morning. I often stand on the heating radiator to look at them, consuming my breakfast bread at the same time. Sometimes, I also take down some tiny pieces of bread, and place them on the space under the branches as if I carelessly dropped them.&lt;/p&gt;

&lt;p&gt;Although I prefer them to fly far away to warmer places, I still hope they would often come over, foraging and chatting.&lt;/p&gt;

&lt;p&gt;Because when I see them in the floating snow flakes, I know the spring in my home country is quietly sprouting here in Baltimore.&lt;/p&gt;

&lt;p&gt;March 7th before dawn&lt;br /&gt;
University West Apartment&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://phding.com/the-snow-of-baltimore/&quot;&gt;The Snow of Baltimore&lt;/a&gt; was originally published by Chombear at &lt;a href=&quot;http://phding.com&quot;&gt;PHDING&lt;/a&gt; on March 07, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Random Words]]></title>
  <link rel="alternate" type="text/html" href="http://phding.com/random-words/" />
  <id>http://phding.com/random-words</id>
  <published>2014-12-07T00:18:46-05:00</published>
  <updated>2014-12-07T00:18:46-05:00</updated>
  <author>
    <name>Chombear</name>
    <uri>http://phding.com</uri>
    <email>shuoyangd@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Last night I went to the concert of Hopkins Symphony Orchestra.&lt;br /&gt;
The orchestra, to my surprise, is very professional and well-trained.&lt;br /&gt;
The Mendelsson’s violin concerto, one of my favorites, is well rendered, despite that to me the violinist is a little bit overwhelmed, and there are several gaps where the orchestra and the violinist are disjoint.&lt;br /&gt;
But anyway, this is a live performance and it’s unfair to compare them with those legendary recordings such as that of Kyung Wha Cheung.&lt;/p&gt;

&lt;p&gt;However, the most impressive part throughout the concert is not the music itself.&lt;br /&gt;
At the beginning of the second half, instead of starting right away, the conductor first took over the microphone and said a few words about the Ferguson incident.&lt;br /&gt;
The last sentence he said was (this is an approximate quote since I don’t really remember the exact words):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We have already witnessed so much violence in this country. But we will continue playing our music, and even in a way that is more moving and beautiful.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This reminded me of a clip from &lt;em&gt;Władysław Szpilman&lt;/em&gt;’s book &lt;em&gt;The pianist&lt;/em&gt; I happend to have read a few days ago:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;One day, around 5th August, when I had taken a brief rest from work and was walking down Gęsia Street, I happened to see Janusz Korczak and his orphans leaving the ghetto. The evacuation of the Jewish orphanage run by Janusz Korczak had been ordered for that morning.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The children were to have been taken away alone. He had the chance to save himself, and it was only with difficulty that he persuaded the Germans to take him too. He had spent long years of his life with children and now, on this last journey, he could not leave them alone. He wanted to ease things for them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;He told the orphans they were going out into the country, so they ought to be cheerful. At last they would be able to exchange the horrible suffocating city walls for meadows of flowers, streams where they could bathe, woods full of berries and mushrooms. He told them to wear their best clothes, and so they came out into the yard, two by two, nicely dressed and in a happy mood.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The little column was led by an SS man who loved children, as Germans do, even those he was about to see on their way into the next world. He took a special liking to a boy of twelve, a violinist who had his instrument under his arm. The SS man told him to go to the head of the procession of children and play – and so they set off.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;When I met them in Gęsia Street, the smiling children were singing in chorus, the little violinist was playing for them and Korczak was carrying two of the smallest infants, who were beaming too, and telling them some amusing story.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;I am sure that even in the gas chamber, as the Zyklon B gas was stifling childish throats and striking terror instead of hope into the orphans’ hearts, the Old Doctor must have whispered with one last effort, ‘it’s all right, children, it will be all right’. So that at least he could spare his little charges the fear of passing from life to death.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Music never outvoice the growling of “state apparatus”.&lt;br /&gt;
But we need it all the time.&lt;br /&gt;
Because even in the darkest of hours, it still gives us hope.&lt;/p&gt;

&lt;p&gt;That’s why we love it.&lt;/p&gt;

&lt;p&gt;And there flows the disturbed opening of “Romeo and Juliet Overture”.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://phding.com/random-words/&quot;&gt;Random Words&lt;/a&gt; was originally published by Chombear at &lt;a href=&quot;http://phding.com&quot;&gt;PHDING&lt;/a&gt; on December 07, 2014.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Hello MathJax]]></title>
  <link rel="alternate" type="text/html" href="http://phding.com/hello-mathjax/" />
  <id>http://phding.com/hello-mathjax</id>
  <published>2014-11-27T22:12:30-05:00</published>
  <updated>2014-11-27T22:12:30-05:00</updated>
  <author>
    <name>Chombear</name>
    <uri>http://phding.com</uri>
    <email>shuoyangd@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Just get the configuration done. Let’s give a try.&lt;br /&gt;
\[p(Y\,|\,X) = \dfrac{p(X\,|\,Y)p(Y)}{p(X)}\]&lt;br /&gt;
Yep you’re right. I love Bayesian statistics.&lt;br /&gt;
I believe good graphical models are able to make the best of both linguistic knowledge and statistical properties.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://phding.com/hello-mathjax/&quot;&gt;Hello MathJax&lt;/a&gt; was originally published by Chombear at &lt;a href=&quot;http://phding.com&quot;&gt;PHDING&lt;/a&gt; on November 27, 2014.&lt;/p&gt;
  </content>
</entry>

</feed>
